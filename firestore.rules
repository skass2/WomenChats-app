rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========== USERS ==========
    match /users/{userId} {
      allow read: if request.auth != null
        && request.auth.token.email_verified == true;
      allow create, update, delete: if request.auth != null
      && request.auth.uid == userId
      && request.auth.token.email_verified == true;
    }

    // ========== FRIENDSHIPS ==========
    match /friendships/{fid} {
      allow read: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in resource.data.participants;

      allow create: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid == request.resource.data.requestBy
        && request.resource.data.status == "pending";

      allow update: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in resource.data.participants
        && (
          (resource.data.status == "pending"
            && request.resource.data.status == "accepted"
            && request.auth.uid != resource.data.requestBy)
        );

      allow delete: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in resource.data.participants;
    }

    // ========== CHATS ==========
    match /chats/{chatId} {
      allow read: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in resource.data.participants;

      allow create: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in request.resource.data.participants
        && isFriend(request.resource.data.participants);

      allow update: if request.auth != null
        && request.auth.token.email_verified == true
        && request.auth.uid in resource.data.participants;

      allow delete: if false;

      // ----- MESSAGES -----
      match /messages/{messageId} {
        allow read: if request.auth != null
          && request.auth.token.email_verified == true
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        allow create: if request.auth != null
          && request.auth.token.email_verified == true
          && request.auth.uid == request.resource.data.senderId
          && isFriend(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);

        // Sender có thể update text, deleted, timestamp
        allow update: if request.auth != null
          && request.auth.token.email_verified == true
          && request.auth.uid == resource.data.senderId
          && request.resource.data.keys().hasOnly(["text","deleted","timestamp","senderId"])
          && request.resource.data.senderId == resource.data.senderId;

        allow delete: if false;
      }
    }

    // ========== SUPPORT FUNCTION ==========
    function isFriend(participants) {
      let friendshipId = participants[0] < participants[1]
        ? participants[0] + "_" + participants[1]
        : participants[1] + "_" + participants[0];

      return exists(/databases/$(database)/documents/friendships/$(friendshipId))
        && get(/databases/$(database)/documents/friendships/$(friendshipId)).data.status == "accepted";
    }
  }
}
